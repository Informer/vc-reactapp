{"version":3,"sources":["logo.svg","components/Add_adapter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Add_adapter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateInput","e","setState","defineProperty","target","name","value","submitAdapter","preventDefault","db","firestore","settings","timestampsInSnapshots","collection","add","Name","state","Description","Image","Price","Rating","Ref_link_1","Ref_link_2","Ref_link_3","react_default","a","createElement","onSubmit","type","placeholder","onChange","React","Component","App","className","src","logo","alt","components_Add_adapter","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3227742.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport firebase from 'firebase';\n\nconst config = {\n  apiKey: \"AIzaSyDYwcrk4l9d0UyFUzGHrc5bsFdRvLA6B_I\",\n  authDomain: \"connect-it-38906.firebaseapp.com\",\n  databaseURL: \"https://connect-it-38906.firebaseio.com\",\n  projectId: \"connect-it-38906\",\n  storageBucket: \"connect-it-38906.appspot.com\",\n  messagingSenderId: \"502031912641\"\n};\nfirebase.initializeApp(config);\n\n\nclass Add_adapter extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            Name: \"\",\n            Description: \"\",\n            Image:\"\",\n            Price:\"\",\n            Rating:\"\",\n            Ref_link_1:\"\",\n            Ref_link_2:\"\",\n            Ref_link_3:\"\"\n        };\n    }\n    \n    /* \n    Next we’ll add a custom attribute to both input fields, which will call a \n    function ‘updateInput’ to set our component state, when a user enters data into the form. \n    */\n    \n   updateInput = e => {\n        this.setState({\n        [e.target.name]: e.target.value\n        });\n    }\n\n    submitAdapter = e => {\n      e.preventDefault();\n      // add data into Firebase\n      const db = firebase.firestore();\n      db.settings({\n        timestampsInSnapshots: true\n      });\n      const adapterRef = db.collection('adapters').add({\n        Name: this.state.Name,\n        Description: this.state.Description,\n        Image: this.state.Image,\n        Price: this.state.Price,\n        Rating: this.state.Rating,\n        Ref_link_1: this.state.Ref_link_1,\n        Ref_link_2: this.state.Ref_link_2,\n        Ref_link_3: this.state.Ref_link_3\n      });  \n      // reset fields to null strings\n      this.setState({\n        Name: \"\",\n        Description: \"\",\n        Image:\"\",\n        Price:\"\",\n        Rating:\"\",\n        Ref_link_1:\"\",\n        Ref_link_2:\"\",\n        Ref_link_3:\"\"\n      });\n    };\n\n    render() {\n    return (\n        <form onSubmit={this.submitAdapter}>\n          <input\n            type=\"text\"\n            name=\"Name\"\n            placeholder=\"Adapter Name\"\n            onChange={this.updateInput}\n            value={this.state.Name}\n          />\n          <input\n            type=\"text\"\n            name=\"Image\"\n            placeholder=\"Image URL\"\n            onChange={this.updateInput}\n            value={this.state.Image}\n          />\n          <input\n            type=\"text\"\n            name=\"Description\"\n            placeholder=\"Description\"\n            onChange={this.updateInput}\n            value={this.state.Description}\n          />\n           <input\n            type=\"text\"\n            name=\"Price\"\n            placeholder=\"Price\"\n            onChange={this.updateInput}\n            value={this.state.Price}\n          />\n          <input\n            type=\"text\"\n            name=\"Rating\"\n            placeholder=\"Rating\"\n            onChange={this.updateInput}\n            value={this.state.Rating}\n          />\n          <input\n            type=\"text\"\n            name=\"Ref_link_1\"\n            placeholder=\"Referral link 1\"\n            onChange={this.updateInput}\n            value={this.state.Ref_link_1}\n          />\n          <input\n            type=\"text\"\n            name=\"Ref_link_2\"\n            placeholder=\"Referral link 2\"\n            onChange={this.updateInput}\n            value={this.state.Ref_link_2}\n          />\n          <input\n            type=\"text\"\n            name=\"Ref_link_3\"\n            placeholder=\"Referral link 3\"\n            onChange={this.updateInput}\n            value={this.state.Ref_link_3}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n        );\n      }\n   }\n\nexport default Add_adapter;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Add_adapter from \"./components/Add_adapter\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            <Add_adapter/>\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import Add_adapter from './components/Add_adapter';\n\nReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}